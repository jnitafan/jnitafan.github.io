//	HYPE.documents["3DLungsExample"]

(function(){(function m(){function k(a,b,c,d){var e=!1;null==window[a]&&(null==window[b]?(window[b]=[],window[b].push(m),a=document.getElementsByTagName("head")[0],b=document.createElement("script"),e=l,false==!0&&(e=""),b.type="text/javascript",""!=d&&(b.integrity=d,b.setAttribute("crossorigin","anonymous")),b.src=e+"/"+c,a.appendChild(b)):window[b].push(m),e=!0);return e}var l="3DLungsExample.hyperesources",f="3DLungsExample",g="3dlungsexample_hype_container";if(false==
!1)try{for(var c=document.getElementsByTagName("script"),a=0;a<c.length;a++){var d=c[a].src,b=null!=d?d.indexOf("/3dlungsexample_hype_generated_script.js"):-1;if(-1!=b){l=d.substr(0,b);break}}}catch(p){}c=null==navigator.userAgentData&&navigator.userAgent.match(/MSIE (\d+\.\d+)/);c=parseFloat(c&&c[1])||null;d=!0==(null!=window.HYPE_768F||null!=window.HYPE_dtl_768F)||true==!0||null!=c&&10>c;a=!0==d?"HYPE-768.full.min.js":"HYPE-768.thin.min.js";c=!0==d?"F":"T";
d=d?"":"";if(false==!1&&(a=k("HYPE_768"+c,"HYPE_dtl_768"+c,a,d),false==!0&&(a=a||k("HYPE_w_768","HYPE_wdtl_768","HYPE-768.waypoints.min.js","")),false==!0&&(a=a||k("Matter","HYPE_pdtl_768","HYPE-768.physics.min.js","")),a))return;d=window.HYPE.documents;if(null!=d[f]){b=1;a=f;do f=""+a+"-"+b++;while(null!=d[f]);for(var e=
document.getElementsByTagName("div"),b=!1,a=0;a<e.length;a++)if(e[a].id==g&&null==e[a].getAttribute("HYP_dn")){var b=1,h=g;do g=""+h+"-"+b++;while(null!=document.getElementById(g));e[a].id=g;b=!0;break}if(!1==b)return}b=[];b=[{name:"Breadcrumbs",source:"function(hypeDocument, element, event) {\n    const page_num = document.getElementsByClassName(\"breadcrumb\")[0].getAttribute(\"page_number\")\n    const current_page = hypeDocument.currentSceneName()\n    let result = []\n    for (let i = 0; i < page_num; i++) {\n\n        if (i + 1 == current_page) {\n            result.push(`reddot`)\n        } else {\n            result.push(`dot`)\n\n        }\n    }\n\n    result.map((item, i) => {\n        // return `<div class=${item}></div>`\n        // onClick=hypeDocument.showSceneNamed(${i+1})\n        const button = document.createElement('button');\n        button.onclick = function() {\n            hypeDocument.showSceneNamed(`${i+1}`)\n\n            console.log(hypeDocument.currentSceneName())\n        }\n        button.setAttribute(\"tabindex\", \"0\")\n        button.setAttribute(\"class\", item)\n        document.getElementsByClassName(\"breadcrumb\")[current_page - 1].appendChild(button)\n\n    })\t\n\t\n}",identifier:"412"},{name:"loadObject",source:"function(hypeDocument, element, event) {\n\tif (document.readyState !== \"complete\") {\n\t\t// Loading hasn't finished yet\n\t\tdocument.addEventListener(\"DOMContentLoaded\", (event) => {\n\t\t\tloadModel();\n\t\t});\n\n\t} else {\n\t\t// `DOMContentLoaded` has already fired\n\t\tloadModel();\n\t}\n\n\tfunction loadModel() {\n\n\t\tlet instruction = document.querySelector('.instruction')\n\n\t\tlet loadingBar = document.querySelector('.loadingBar')\n\t\tloadingBar.style.display = 'block'\n\n\t\tlet loadButton = document.querySelector('.loadButton')\n\t\tloadButton.style.display = 'none'\n\n\t\tlet loadScreen = document.querySelector('.loadScreen')\n\n\t\tconst canvas = document.querySelector('.webgl')\n\t\tconst scene = new THREE.Scene()\n\t\tconst sizes = {\n\t\t\twidth: canvas.width,\n\t\t\theight: canvas.height\n\t\t}\n\n\t\t// Base camera\n\t\tconst camera = new THREE.PerspectiveCamera(3.0, sizes.width / sizes.height, 0.1, 1000)\n\t\tcamera.position.set(-30.298, -0.172, 95.299)\n\t\tscene.add(camera)\n\n\t\t//Lights \n\t\tconst light1 = new THREE.DirectionalLight('#ffffff', 1)\n\t\tscene.add(light1)\n\t\tlight1.position.set(0, 0.75, 4)\n\n\t\tconst light2 = new THREE.DirectionalLight('#ffffff', 1)\n\t\tscene.add(light2)\n\t\tlight2.position.set(0, 0, -4)\n\n\t\tconst ambient = new THREE.AmbientLight(0xFFFFFF);\n\t\tambient.intensity = 2\n\t\tscene.add(ambient)\n\n\t\t//Controls\n\t\tconst controls = new OrbitControls(camera, canvas)\n\t\tcontrols.enableDamping = false\n\t\tcontrols.enableZoom = false\n\t\tcontrols.enablePan = false\n\t\tcontrols.maxDistance = 100.0\n\t\tcontrols.minDistance = 0.5\n\t\tcontrols.minPolarAngle = 1.0\n\t\tcontrols.maxPolarAngle = Math.PI - 1.25\n\t\tcontrols.maxAzimuthAngle = Infinity\n\t\tcontrols.minAzimuthAngle = Infinity\n\t\tcontrols.autoRotate = true\n\t\tcontrols.autoRotateSpeed = Math.PI / 8\n\n\t\t// Renderers\n\t\tconst renderer = new THREE.WebGLRenderer({\n\t\t\tcanvas: canvas,\n\t\t\tantialias: true,\n\t\t\talpha: false,\n\t\t\tlogarithmicDepthBuffer: true\n\t\t})\n\n\t\trenderer.setSize(sizes.width, sizes.height)\n\t\trenderer.setClearColor(0xf2d7d3);\n\t\trenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\n\t\trenderer.outputColorSpace = THREE.SRGBColorSpace\n\n\t\tconst renderer_text = new CSS3DRenderer();\n\t\trenderer_text.setSize(sizes.width, sizes.height);\n\t\trenderer_text.domElement.style.position = 'absolute';\n\t\trenderer_text.domElement.style.top = 0;\n\t\tcanvas.parentElement.insertBefore(renderer_text.domElement, canvas);\n\n\t\tlet model;\n\n\t\tlet annotation = new THREE.Group()\n\t\tannotation.scale.set(0.01, 0.01, 0.01)\n\t\tscene.add(annotation)\n\n\t\tlet lines = new THREE.Group()\n\t\tlet subLines = new THREE.Group()\n\t\tsubLines.position.set(73, 142.5, 17.5)\n\t\tsubLines.scale.set(0.005, 0.005, 0.005)\n\t\tannotation.add(subLines)\n\t\tannotation.add(lines)\n\n\t\tlet labels = new THREE.Group()\n\t\tlet subLabels = new THREE.Group()\n\t\tsubLabels.position.set(73, 142.5, 17.5)\n\t\tsubLabels.scale.set(0.005, 0.005, 0.005)\n\t\tannotation.add(subLabels)\n\t\tannotation.add(labels)\n\n\t\tlet outlines = new THREE.Group()\n\n\t\tconst lineMaterial = new LineMaterial({\n\t\t\tcolor: 0xf28a52,\n\t\t\tlinewidth: 0.03,\n\t\t\tworldUnits: true,\n\t\t\tdepthWrite: false,\n\t\t\tdashed: true,\n\t\t\tdashScale: 0.1\n\t\t});\n\n\t\tconst subLineMaterial = new LineMaterial({\n\t\t\tcolor: 0xf28a52,\n\t\t\tlinewidth: 0.0003,\n\t\t\tworldUnits: true,\n\t\t\tdepthWrite: false,\n\t\t\tdashed: true,\n\t\t\tdashScale: 0.1\n\t\t});\n\n\t\tconst clickables = []\n\t\tconst clickableNames = []\n\n\t\t// Zoom\n\t\tlet zoom = false;\n\t\tlet zoomMaterial = new THREE.MeshBasicMaterial({\n\t\t\tcolor: new THREE.Color(0x000000),\n\t\t});\n\t\tlet zoomGeometry = new THREE.CircleGeometry(0.25, 32);\n\t\tlet zoomMesh = new THREE.Mesh(zoomGeometry, zoomMaterial);\n\t\tlet zoomBtn;\n\t\tzoomMesh.position.set(0.73, 1.425, 0.140)\n\t\tzoomMesh.name = \"zoom\";\n\t\tzoomMesh.visible = false;\n\t\tclickables.push(zoomMesh)\n\t\tscene.add(zoomMesh)\n\n\t\t// Loader\n\t\tconst loader = new GLTFLoader()\n\t\tloader.load('3DLungsExample.hyperesources/lungs.glb',\n\t\t\t(gltf) => {\n\t\t\t\tmodel = gltf.scene\n\n\t\t\t\tmodel.scale.set(1, 1, 1)\n\t\t\t\tmodel.position.set(0, -0.85, 0)\n\n\t\t\t\tzoomBtn = model.getObjectByName(\"zoomBtn\", true);\n\n\t\t\t\tmodel.traverse((child) => {\n\t\t\t\t\tif (child.name == \"zoomBtn\") {\n\t\t\t\t\t\tchild.material = new THREE.MeshStandardMaterial()\n\t\t\t\t\t\tchild.material.side = THREE.DoubleSide;\n\t\t\t\t\t\tchild.material.color.setHex(0xf28a52);\n\n\t\t\t\t\t\tnew TWEEN.Tween(child.scale)\n\t\t\t\t\t\t.to(new THREE.Vector3( 1.5, 1.5, 1.5 ), 1000)\n\t\t\t\t\t\t.easing(TWEEN.Easing.Sinusoidal.InOut)\n\t\t\t\t\t\t.yoyo(true)\n\t\t\t\t\t\t.repeat(Infinity)\n\t\t\t\t\t\t.start();\n\n\t\t\t\t\t} else if (typeof child.material !== \"undefined\") {\n\t\t\t\t\t\tchild.material = new THREE.MeshStandardMaterial()\n\t\t\t\t\t\tchild.material.side = THREE.DoubleSide;\n\t\t\t\t\t\tchild.material.roughness = 0.3;\n\t\t\t\t\t\tchild.material.metalness = 0.0;\n\n\t\t\t\t\t\tlet label;\n\t\t\t\t\t\tlet points = [];\n\t\t\t\t\t\tlet sub = false;\n\n\t\t\t\t\t\tlet outline = child.clone()\n\t\t\t\t\t\toutline.geometry = child.geometry.clone()\n\t\t\t\t\t\toutline.material = new THREE.MeshBasicMaterial({\n\t\t\t\t\t\t\tcolor: 0x0073ff,\n\t\t\t\t\t\t\tside: THREE.BackSide,\n\t\t\t\t\t\t\tdepthTest: true,\n\t\t\t\t\t\t\tdepthWrite: false,\n\t\t\t\t\t\t});\n\t\t\t\t\t\toutline.visible = false\n\t\t\t\t\t\toutline.renderOrder = 1\n\t\t\t\t\t\toutlines.add(outline)\n\n\t\t\t\t\t\tswitch (child.name) {\n\t\t\t\t\t\t\tcase \"Lungs\":\n\t\t\t\t\t\t\t\tgenerateOutline(outline.geometry, 0.02)\n\t\t\t\t\t\t\t\tlabel = createElementObject('div', 160, 68)\n\t\t\t\t\t\t\t\tchild.material.color.setHex(0xb5363b);\n\t\t\t\t\t\t\t\tlabel.position.set(300.0, 50.0, 0.0);\n\t\t\t\t\t\t\t\tpoints.push(label.position.x, label.position.y, label.position.z)\n\t\t\t\t\t\t\t\tpoints.push(75.0, 0.0, -50.0)\n\t\t\t\t\t\t\t\tlabels.add(label);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase \"Bronchiles\":\n\t\t\t\t\t\t\t\tgenerateOutline(outline.geometry, 0.02)\n\t\t\t\t\t\t\t\tlabel = createElementObject('div', 260, 64)\n\t\t\t\t\t\t\t\tchild.material.color.setHex(0x83a4c9);\n\t\t\t\t\t\t\t\tlabel.position.set(-180.0, 180.0, 0.0);\n\t\t\t\t\t\t\t\tpoints.push(label.position.x, label.position.y, label.position.z)\n\t\t\t\t\t\t\t\tpoints.push(-10, 160.0, 10.0)\n\t\t\t\t\t\t\t\tlabels.add(label);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase \"Diaphram\":\n\t\t\t\t\t\t\t\tgenerateOutline(outline.geometry, 0.02)\n\t\t\t\t\t\t\t\tlabel = createElementObject('div', 240, 68)\n\t\t\t\t\t\t\t\tchild.material.color.setHex(0xab4649);\n\t\t\t\t\t\t\t\tlabel.position.set(300.0, -100.0, 100.0);\n\t\t\t\t\t\t\t\tpoints.push(label.position.x, label.position.y, label.position.z)\n\t\t\t\t\t\t\t\tpoints.push(140.0, -125.0, 0)\n\t\t\t\t\t\t\t\tlabels.add(label);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase \"Pleura\":\n\t\t\t\t\t\t\t\tgenerateOutline(outline.geometry, 0.02)\n\t\t\t\t\t\t\t\tlabel = createElementObject('div', 170, 64)\n\t\t\t\t\t\t\t\tchild.material.color.setHex(0xab465a);\n\t\t\t\t\t\t\t\tlabel.position.set(-250.0, -45.0, -150.0);\n\t\t\t\t\t\t\t\tpoints.push(label.position.x, label.position.y, label.position.z)\n\t\t\t\t\t\t\t\tpoints.push(-110.0, -25.0, 0)\n\t\t\t\t\t\t\t\tlabels.add(label);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase \"Alveoli\":\n\t\t\t\t\t\t\t\tsub = true\n\t\t\t\t\t\t\t\tgenerateOutline(outline.geometry, 0.0001)\n\t\t\t\t\t\t\t\tlabel = createElementObject('div', 170, 64)\n\t\t\t\t\t\t\t\tchild.material.color.setHex(0xe8d6cc);\n\t\t\t\t\t\t\t\tlabel.position.set(350.0, -100.0, 100.0);\n\t\t\t\t\t\t\t\tpoints.push(label.position.x, label.position.y, label.position.z)\n\t\t\t\t\t\t\t\tpoints.push(150, -10, -90)\n\t\t\t\t\t\t\t\tsubLabels.add(label)\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase \"Pulmonary_Artery\":\n\t\t\t\t\t\t\t\tsub = true\n\t\t\t\t\t\t\t\tgenerateOutline(outline.geometry, 0.0001)\n\t\t\t\t\t\t\t\tlabel = createElementObject('div', 280, 128)\n\t\t\t\t\t\t\t\tlabel.position.set(500.0, 200.0, -200.0);\n\t\t\t\t\t\t\t\tchild.material.color.setHex(0xff0000);\n\t\t\t\t\t\t\t\tpoints.push(label.position.x, label.position.y, label.position.z)\n\t\t\t\t\t\t\t\tpoints.push(150, 175, -150)\n\t\t\t\t\t\t\t\tsubLabels.add(label)\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase \"Pulmonary_Vein\":\n\t\t\t\t\t\t\t\tsub = true\n\t\t\t\t\t\t\t\tgenerateOutline(outline.geometry, 0.0001)\n\t\t\t\t\t\t\t\tlabel = createElementObject('div', 280, 128)\n\t\t\t\t\t\t\t\tlabel.position.set(-250.0, -50.0, -100.0)\n\t\t\t\t\t\t\t\tchild.material.color.setHex(0x000088);\n\t\t\t\t\t\t\t\tpoints.push(label.position.x, label.position.y, label.position.z)\n\t\t\t\t\t\t\t\tpoints.push(100, 40, 0)\n\t\t\t\t\t\t\t\tsubLabels.add(label)\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tlabel.name = child.name\n\t\t\t\t\t\tlabel.mesh.name = child.name\n\t\t\t\t\t\tlabel.ele3D.element.style.background = \"#ffffff\";\n\t\t\t\t\t\tlabel.ele3D.element.style.fontSize = \"50px\";\n\t\t\t\t\t\tlabel.ele3D.element.style.textAlign = \"center\";\n\t\t\t\t\t\tlabel.ele3D.element.style.border = \"3px solid #f28a52\";\n\t\t\t\t\t\tlabel.ele3D.element.textContent = child.name.replace(/_/g, \"\\n\");\n\t\t\t\t\t\tlabel.renderOrder = 3\n\n\t\t\t\t\t\tconst lineGeometry = new LineGeometry().setPositions(points);\n\t\t\t\t\t\tlet line\n\t\t\t\t\t\tif (sub) {\n\t\t\t\t\t\t\tline = new Line2(lineGeometry, subLineMaterial.clone());\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tline = new Line2(lineGeometry, lineMaterial.clone());\n\t\t\t\t\t\t}\n\t\t\t\t\t\tline.computeLineDistances()\n\t\t\t\t\t\tline.name = child.name\n\t\t\t\t\t\tline.renderOrder = 2\n\t\t\t\t\t\tif (sub) {\n\t\t\t\t\t\t\tsubLines.add(line);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tlines.add(line);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tclickables.push(child)\n\t\t\t\t\t\tclickables.push(label.mesh)\n\t\t\t\t\t\tclickableNames.push(child.name)\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tmodel.add(outlines)\n\t\t\t\tscene.add(model)\n\n\t\t\t\t// Create a raycaster and track the mouse\n\n\n\t\t\t\tcanvas.addEventListener('click', (event) => {\n\t\t\t\t\tclickableItems(event)\n\t\t\t\t});\n\n\t\t\t\tloadingBar.style.display = 'none'\n\t\t\t\tloadScreen.style.display = 'none'\n\t\t\t\tinstruction.style.marginLeft = '-100%'\n\t\t\t},\n\t\t\t(xhr) => {\n\t\t\t\tloadingBar.style.width = (xhr.loaded / xhr.total * 50) + '%';\n\t\t\t}\n\t\t)\n\n\t\t// Selection\n\t\tlet returnBtn = document.querySelector('.Btn-Return')\n\t\treturnBtn.addEventListener('click', (event) => {\n\t\t\tzoomSet(zoom)\n\t\t})\n\n\t\tconst selectedColor = new THREE.Color().setHex(0x0073ff)\n\t\tconst deselectedColor = new THREE.Color().setHex(0xf28a52)\n\t\tconst raycaster = new THREE.Raycaster();\n\t\tconst mouse = new THREE.Vector2();\n\n\t\tconst clickableItems = (event) => {\n\t\t\t// Calculate normalized mouse coordinates\n\t\t\tvar bounds = event.target.getBoundingClientRect();\n\t\t\tmouse.x = (event.clientX / bounds.right) * 2 - 1;\n\t\t\tmouse.y = -(event.clientY / bounds.bottom) * 2 + 1;\n\n\t\t\t// Update the raycaster with the camera and mouse position\n\t\t\traycaster.setFromCamera(mouse, camera);\n\n\t\t\t// Check for intersections\n\t\t\tconst intersects = raycaster.intersectObjects(clickables);\n\t\t\tif (intersects.length > 0) {\n\t\t\t\tif (intersects[0].object === zoomMesh) {\n\t\t\t\t\tzoomSet(zoom)\n\t\t\t\t} else {\n\t\t\t\t\tselectSelection(intersects[0].object.name)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst resetSelection = (name) => {\n\t\t\tlet line = lines.getObjectByName(name);\n\t\t\tlet subLine = subLines.getObjectByName(name);\n\t\t\tlet label = labels.getObjectByName(name);\n\t\t\tlet subLabel = subLabels.getObjectByName(name);\n\t\t\tif (label) {\n\t\t\t\tlabel.ele3D.element.style.border = \"3px solid #f28a52\";\n\t\t\t} else if (subLabel) {\n\t\t\t\tsubLabel.ele3D.element.style.border = \"3px solid #f28a52\";\n\t\t\t}\n\t\t\tif (line) {\n\t\t\t\tline.material.dashed = true\n\t\t\t\tline.material.color = deselectedColor\n\t\t\t} else if (subLine) {\n\t\t\t\tsubLine.material.dashed = true\n\t\t\t\tsubLine.material.color = deselectedColor\n\t\t\t}\n\t\t\tlet outline = outlines.getObjectByName(name);\n\t\t\toutline.visible = false\n\t\t}\n\n\t\tconst zoomedNames = [\"Pulmonary_Artery\", \"Pulmonary_Vein\", \"Alveoli\"]\n\t\tconst selectSelection = (name) => {\n\t\t\tif (zoom && !zoomedNames.includes(name)) {\n\n\t\t\t} else {\n\t\t\t\tlet line;\n\t\t\t\tlet label;\n\t\t\t\tif (zoom) {\n\t\t\t\t\tline = subLines.getObjectByName(name);\n\t\t\t\t\tlabel = subLabels.getObjectByName(name);\n\t\t\t\t} else {\n\t\t\t\t\tline = lines.getObjectByName(name);\n\t\t\t\t\tlabel = labels.getObjectByName(name);\n\t\t\t\t}\n\t\t\t\tclickableNames.forEach(i => {\n\t\t\t\t\tif (name !== i) {\n\t\t\t\t\t\tresetSelection(i)\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\tlet outline = outlines.getObjectByName(name);\n\t\t\t\tif (label) {\n\t\t\t\t\tlabel.ele3D.element.style.border = \"3px solid #0073ff\";\n\t\t\t\t}\n\t\t\t\tif (line) {\n\t\t\t\t\tline.material.dashed = false\n\t\t\t\t\tline.material.color = selectedColor\n\t\t\t\t}\n\t\t\t\toutline.visible = true\n\t\t\t}\n\t\t}\n\n\t\t// Zoom In/Out\n\t\tconst zoomTarget = new THREE.Vector3(0.735, 1.43, 0.170);\n\t\tconst zoomPosition = new THREE.Vector3(0.926, 1.461, 0.680)\n\t\tconst zoomOutPosition = new THREE.Vector3(-30.298, -0.172, 95.299)\n\t\tconst zoomSet = (set) => {\n\t\t\tif (controls.enabled) {\n\t\t\t\tzoom = !set\n\t\t\t\tclickableNames.forEach(i => {\n\t\t\t\t\tresetSelection(i)\n\t\t\t\t})\n\t\t\t\tcontrols.enabled = false\n\t\t\t\tif (zoom) {\n\t\t\t\t\tcontrols.maxAzimuthAngle = 2.4\n\t\t\t\t\tcontrols.minAzimuthAngle = -2.4\n\t\t\t\t\tzoomMesh.position.set(1000, 1000, 1000)\n\t\t\t\t\tnew TWEEN.Tween(camera.position)\n\t\t\t\t\t\t.to(zoomPosition, 5000)\n\t\t\t\t\t\t.easing(TWEEN.Easing.Cubic.Out)\n\t\t\t\t\t\t.onComplete(function () {\n\t\t\t\t\t\t\tcamera.position = zoomPosition\n\t\t\t\t\t\t\tcontrols.enabled = true\n\t\t\t\t\t\t\tlines.traverse((line) => {\n\t\t\t\t\t\t\t\tline.visible = false\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\tlabels.traverse((label) => {\n\t\t\t\t\t\t\t\tlabel.visible = false\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.start();\n\t\t\t\t\tnew TWEEN.Tween(controls.target)\n\t\t\t\t\t\t.to(zoomTarget, 2500)\n\t\t\t\t\t\t.easing(TWEEN.Easing.Cubic.Out)\n\t\t\t\t\t\t.start();\n\t\t\t\t\treturnBtn.style.marginTop = \"0px\"\n\t\t\t\t\tcontrols.autoRotate = false\n\t\t\t\t} else {\n\t\t\t\t\tcontrols.maxAzimuthAngle = Infinity\n\t\t\t\t\tcontrols.minAzimuthAngle = Infinity\n\t\t\t\t\tlines.traverse((line) => {\n\t\t\t\t\t\tline.visible = true\n\t\t\t\t\t})\n\t\t\t\t\tlabels.traverse((label) => {\n\t\t\t\t\t\tlabel.visible = true\n\t\t\t\t\t})\n\t\t\t\t\tzoomMesh.position.set(0.73, 1.425, 0.140)\n\t\t\t\t\tnew TWEEN.Tween(camera.position)\n\t\t\t\t\t\t.to(zoomOutPosition, 2500)\n\t\t\t\t\t\t.easing(TWEEN.Easing.Cubic.InOut)\n\t\t\t\t\t\t.onComplete(function () {\n\t\t\t\t\t\t\tcamera.position = zoomOutPosition\n\t\t\t\t\t\t\tcontrols.enabled = true\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.start();\n\t\t\t\t\tnew TWEEN.Tween(controls.target)\n\t\t\t\t\t\t.to(scene.position, 2500)\n\t\t\t\t\t\t.easing(TWEEN.Easing.Cubic.InOut)\n\t\t\t\t\t\t.start();\n\t\t\t\t\treturnBtn.style.marginTop = \"-125px\"\n\t\t\t\t\tcontrols.autoRotate = true\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Render\n\t\tconst updateLabels = () => {\n\t\t\tlabels.children.forEach(obj => {\n\t\t\t\tobj.lookAt(camera.position)\n\t\t\t});\n\t\t\tsubLabels.children.forEach(obj => {\n\t\t\t\tobj.lookAt(camera.position)\n\t\t\t});\n\t\t\tzoomMesh.lookAt(camera.position)\n\t\t\tif (zoomBtn !== undefined) {\n\t\t\t\tzoomBtn.lookAt(camera.position)\n\t\t\t}\n\t\t}\n\n\t\tconst tick = () => {\n\t\t\tupdateLabels()\n\t\t\tcontrols.update()\n\t\t\trenderer.render(scene, camera)\n\t\t\trenderer_text.render(scene, camera);\n\t\t\tTWEEN.update();\n\t\t\twindow.requestAnimationFrame(tick)\n\t\t}\n\n\t\ttick()\n\t}\n\n\tfunction createElementObject(type, width, height) {\n\t\tconst obj = new THREE.Group;\n\t\tconst ele = document.createElement(type);\n\t\tele.style.width = width + 'px';\n\t\tele.style.height = height + 'px';\n\t\tele.style.opacity = 0.999;\n\t\tele.style.boxSizing = 'border-box';\n\n\t\tconst ele3D = new CSS3DObject(ele);\n\t\tobj.ele3D = ele3D\n\t\tobj.add(ele3D)\n\n\t\tlet material = new THREE.MeshPhongMaterial({\n\t\t\topacity: 0.0,\n\t\t\tcolor: new THREE.Color(0x111111),\n\t\t\tblending: THREE.NoBlending,\n\t\t});\n\t\tlet geometry = new THREE.BoxGeometry(width, height, 1.0);\n\t\tlet mesh = new THREE.Mesh(geometry, material);\n\t\tobj.mesh = mesh\n\t\tobj.add(mesh);\n\n\t\treturn obj;\n\t}\n\n\tfunction generateOutline(bufferGeometry, thickness) {\n\t\t// Get position and normal attributes\n\t\tconst positionAttribute = bufferGeometry.attributes.position;\n\t\tconst normalAttribute = bufferGeometry.attributes.normal;\n\n\t\t// Create a new Float32Array for the modified positions\n\t\tconst newPositions = new Float32Array(positionAttribute.count * 3);\n\n\t\t// Loop through each vertex\n\t\tfor (let i = 0; i < positionAttribute.count; i++) {\n\t\t\t// Original position\n\t\t\tconst x = positionAttribute.getX(i);\n\t\t\tconst y = positionAttribute.getY(i);\n\t\t\tconst z = positionAttribute.getZ(i);\n\n\t\t\t// Normal direction\n\t\t\tconst nx = normalAttribute.getX(i);\n\t\t\tconst ny = normalAttribute.getY(i);\n\t\t\tconst nz = normalAttribute.getZ(i);\n\n\t\t\t// Displace position along the normal\n\t\t\tnewPositions[i * 3] = x + nx * thickness;\n\t\t\tnewPositions[i * 3 + 1] = y + ny * thickness;\n\t\t\tnewPositions[i * 3 + 2] = z + nz * thickness;\n\t\t}\n\n\t\t// Update the geometry with the new positions\n\t\tbufferGeometry.setAttribute(\n\t\t\t'position',\n\t\t\tnew THREE.BufferAttribute(newPositions, 3)\n\t\t);\n\t}\n\n}",identifier:"769"},{name:"reloadHype",source:"function(hypeDocument, element, event) {\twindow.location.href = window.location.href;\n}",identifier:"834"}];e={};h={};for(a=0;a<b.length;a++)try{h[b[a].identifier]=b[a].name,e[b[a].name]=eval("(function(){return "+b[a].source+"})();")}catch(n){window.console&&window.console.log(n),e[b[a].name]=function(){}}c=new window["HYPE_768"+c](f,g,{"-2":{n:"blank.gif"},"2":{n:"FontAwesome.otf"},"3":{n:"fontawesome-webfont.eot"},"4":{n:"fontawesome-webfont.woff"},"5":{n:"fontawesome-webfont.woff2"},"6":{n:"GlobalConnectStyle-HLT.css"},"7":{n:"lungs.glb"},"-1":{n:"PIE.htc"},"0":{n:"font-awesome.min.css"},"8":{p:1,n:"3DPreview.jpg",g:"843",o:true,t:"@1x"},"1":{n:"fontawesome-webfont.ttf"},"9":{p:1,n:"3DPreview_2x.jpg",g:"843",o:true,t:"@2x"}},
l,["<style>\n     /* Make sure that 'i' class=\"fa\" elements are not actually italic */\n    .HYPE_scene i.fa {\n     font-style: normal !important;\n    }\n</style>"],e,[{n:"1",o:"498",X:[0]}],[{o:"509",p:"600px",a:100,Y:1140,Z:550,b:100,cA:false,c:"#FFF",L:[],bY:1,d:1140,U:{},T:{"819_hover":{q:false,z:1,i:"819_hover",n:"819_hover",a:[{f:"c",y:0,z:1,i:"g",e:"#10596E",s:"#045491",o:"851"},{f:"c",y:0,z:1,i:"g",e:"#10596E",s:"#045491",o:"850"},{y:1,i:"g",s:"#10596E",z:0,o:"851",f:"c"},{y:1,i:"g",s:"#10596E",z:0,o:"850",f:"c"}],f:30,b:[]},"838_hover":{q:false,z:1,i:"838_hover",n:"838_hover",a:[{f:"c",y:0,z:1,i:"g",e:"#10596E",s:"#045491",o:"850"},{y:1,i:"g",s:"#10596E",z:0,o:"850",f:"c"}],f:30,b:[]},kTimelineDefaultIdentifier:{q:false,z:0,i:"kTimelineDefaultIdentifier",n:"Main Timeline",a:[],f:30,b:[]}},bZ:180,O:["853","860","861","858","862","852","847","850","851","848","857","856","855","859","854","849"],n:"Untitled Layout","_":0,v:{"859":{dF:"butt",x:"visible",a:498,b:171,j:"absolute",bF:"858",dL:"nonzero",dC:{path:[[0,191,0,191,0,0,0,0],[0,0,0,0,165,94.3494,165,94.3494]],closed:false},dG:"round",d:191,z:9,k:"div",dD:0,c:165,dE:"#324B51",g:"#FFFDFD"},"848":{x:"visible",k:"div",c:0,aP:"default",d:550,z:12,r:"inline",a:1140,j:"absolute",bF:"847",b:0},"854":{c:1160,cP:"loadingBar",d:54,r:"inline",cY:"1",I:"Solid",J:"Solid",K:"Solid",g:"#FFFDFD",L:"Solid",M:0,bF:"847",N:0,A:"#324B51",x:"visible",j:"absolute",B:"#324B51",P:0,O:0,C:"#324B51",z:19,k:"div",D:"#324B51",a:-10,b:512},"860":{c:1140,d:550,r:"inline",I:"Solid",J:"Solid",bL:0,K:"Solid",BDbL:6.59099265,g:"rgba(0, 0, 0, 0.500)",L:"Solid",aP:"default",M:0,bF:"858",N:0,A:"#324B51",x:"visible",j:"absolute",B:"#324B51",P:0,O:0,C:"#324B51",z:6,k:"div",D:"#324B51",a:0,b:0},"857":{x:"visible",a:-48,b:-23,j:"absolute",r:"inline",z:1,dC:{path:[[16.7072,0,16.7072,0,361.2928,0,361.2928,0],[361.2928,0,370.5199,0,378,7.1635,378,16],[378,16,378,16,326.8343,93,326.8343,93],[326.8343,93,317.4365,104,311.1713,109,295.5083,109],[295.5083,109,295.5083,109,16.7072,109,16.7072,109],[16.7072,109,7.4801,109,0,101.8365,0,93],[0,93,0,93,0,16,0,16],[0,16,0,7.1635,7.4801,0,16.7072,0]],closed:true},bF:"855",d:109,k:"div",c:379,dD:0,dE:"#71D249",g:"#045491"},"852":{c:1140,d:550,I:"Solid",J:"Solid",K:"Solid",g:"#EDFDFF",L:"Solid",M:0,w:"",bF:"847",A:"#F1F8FF",x:"visible",j:"absolute",B:"#F1F8FF",P:0,N:0,C:"#F1F8FF",z:10,O:0,D:"#F1F8FF",k:"div",a:0,b:0},"849":{aV:8,w:"Click and drag to manuever around the Lungs. Click on the magnifying glass to zoom in. Click the label or body part to select.",x:"visible",a:-1020,Z:"break-word",y:"preserve",j:"absolute",bF:"848",r:"inline",yy:"nowrap",s:"Helvetica,Arial,Sans-Serif",b:516,z:9,t:16,aS:8,aT:8,aU:8,G:"#000",k:"div"},"850":{b:0,z:8,K:"None",c:125,cP:"Btn-Return",d:119,L:"None",M:0,e:1,bD:"none",N:0,cQ:1,dB:"button",O:0,g:"#045491",aU:0,cR:1,P:0,bF:"848",aS:0,aV:0,aT:0,j:"absolute",k:"div",aI:15,aJ:15,ti:"0",aK:0,X:0,aL:0,A:"#FFF",Y:113,B:"#FFF",aM:"838_hover",r:"inline",C:"#FFF",cY:"0",s:"FontAwesome",D:"#FFF",Z:"break-word",t:72,E:0,F:"center",G:"#FFF",aP:"pointer",w:"<i class=\"fa fa-arrow-left\" aria-hidden=\"true\"></i>",x:"visible",I:"None",a:-1122,y:"preserve",J:"None"},"855":{x:"visible",k:"div",c:362,d:109,cP:"instruction",z:17,r:"inline",a:32,j:"absolute",bF:"847",b:47},"861":{h:"843",p:"no-repeat",x:"visible",a:0,dB:"img",q:"100% 100%",j:"absolute",r:"inline",z:5,bF:"858",b:0,d:550,k:"div",c:1146},"858":{x:"visible",k:"div",c:1140,d:550,cP:"loadScreen",z:15,r:"inline",a:0,j:"absolute",bF:"847",b:0},"853":{b:0,z:23,K:"Solid",c:1140,cP:"loadButton",d:550,aE:{a:[{p:4,h:"769"}]},L:"Solid",e:0,M:0,N:0,dB:"button",O:0,g:"#FFFDFD",P:0,bF:"847",j:"absolute",k:"div",X:0,A:"#324B51",Y:22,B:"#324B51",r:"inline",C:"#324B51",D:"#324B51",E:0,F:"left",aP:"pointer",w:"",H:"none",x:"visible",I:"Solid",a:0,J:"Solid"},"847":{x:"hidden",a:0,dB:"button",bS:374,j:"absolute",r:"inline",c:1140,k:"div",z:2,d:550,b:0,aP:"pointer"},"856":{aU:8,G:"#FFF",c:291,aV:8,r:"inline",d:41,s:"Helvetica,Arial,Sans-Serif",t:18,Y:26,Z:"break-word",v:"bold",w:"Click on the play button to start the interactive 3D diagram.",bF:"855",j:"absolute",x:"visible",k:"div",y:"preserve",z:2,aS:8,aT:8,a:-8,b:-4},"851":{b:0,z:6,K:"None",c:60,L:"None",d:45,aE:{a:[{p:4,h:"834"}]},M:0,e:1,bD:"none",N:0,cQ:1,dB:"button",O:0,g:"#045491",aU:0,cR:1,P:0,bF:"848",aS:0,aV:0,aT:0,j:"absolute",k:"div",aI:15,aJ:15,ti:"0",aK:0,aL:0,A:"#FFF",Y:41,B:"#FFF",aM:"819_hover",r:"inline",C:"#FFF",cY:"0",s:"FontAwesome",D:"#FFF",Z:"break-word",t:24,F:"center",G:"#FFF",aP:"pointer",w:"<i class=\"fa fa-home\" aria-hidden=\"true\"></i>",x:"visible",I:"None",a:-68,y:"preserve",J:"None"},"862":{c:1140,bS:383,d:550,r:"inline",I:"None",J:"None",bD:"none",K:"None",L:"None",aP:"pointer",M:0,w:"<canvas class=\"webgl\" width=\"1140\" height=\"550\" style=\"position:absolute;top:0;left:0;\"></canvas>",bF:"847",A:"#F1F8FF",j:"absolute",N:0,B:"#F1F8FF",P:0,x:"hidden",C:"#F1F8FF",O:0,z:11,D:"#F1F8FF",dB:"button",k:"div",a:0,F:"center",b:0}}}],{},h,{},
(function (shouldShow, mainContentContainer) {
	var loadingPageID = mainContentContainer.id + "_loading";
	var loadingDiv = document.getElementById(loadingPageID);

	if(shouldShow == true) {
		if(loadingDiv == null) {	
			loadingDiv = document.createElement("div");
			loadingDiv.id = loadingPageID;
			loadingDiv.style.cssText = "overflow:hidden;position:absolute;width:150px;top:40%;left:0;right:0;margin:auto;padding:2px;border:3px solid #BBB;background-color:#EEE;border-radius:10px;text-align:center;font-family:Helvetica,Sans-Serif;font-size:13px;font-weight:700;color:#AAA;z-index:100000;";
			loadingDiv.innerHTML = "Loading";
			mainContentContainer.appendChild(loadingDiv);
		}
 
		loadingDiv.style.display = "block";
		loadingDiv.removeAttribute("aria-hidden");
		mainContentContainer.setAttribute("aria-busy", true);
	} else {
		loadingDiv.style.display = "none";
		loadingDiv.setAttribute("aria-hidden", true);
		mainContentContainer.removeAttribute("aria-busy");
	}
})

,false,true,-1,true,true,false,true,true);d[f]=c.API;document.getElementById(g).setAttribute("HYP_dn",f);c.z_o(this.body)})();})();
